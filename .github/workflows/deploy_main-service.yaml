# This workflow build and push a Docker container to Google Artifact Registry
# and invoke Cloud Deploy when a pull request is approved on the 'main' branch
# and files in 'app-server/main-service/' have changed.
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Invoke Cloud Deploy
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Invoke Cloud Deploy

on:
  pull_request:
    branches:
      - main
    paths:
      - 'app-server/main-service/**'

env:
  PROJECT_ID: package-registry-team11 # Google Cloud project id
  GAR_LOCATION: main-service-dev # Artifact Registry location
  SRC_PATH: '../../app-server/main-service'
  SERVICE: main-service # Cloud Run service name
  REGION: us-central1 # Cloud Run service region

jobs:
  deploy-main-service:
    name: Deploy main-service
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      # Checkout repository for workflow access.
      - name: Checkout
        uses: actions/checkout@v3

      # Authenticate with GCP using OIDC token.
      - name: Google Authentication
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      # Authenticate Docker to Google Cloud Artifact Registry.
      # - name: Docker Auth
      #   id: docker-auth
      #   uses: 'docker/login-action@v1'
      #   with:
      #     username: 'oauth2accesstoken'
      #     password: '${{ steps.auth.outputs.access_token }}'
      #     registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # #
      # - name: Build and Push Container
      #   run: |-
      #     docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./
      #     docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

      # Get current date and time
      - name: Get timestamp
        id: time
        run: echo "::set-output name=time::$(date +'%F-%T')"

      # Create Cloud Deploy release for existing delivery pipeline.
      - name: Create release
        id: create-release
        uses: 'google-github-actions/create-cloud-deploy-release@v0.1.0'
        with:
          name: 'main-service-release-${{ steps.time.outputs.time }}'
          delivery_pipeline: '${{ env.SERVICE }}-pipeline'
          source: ${{ env.SRC_PATH }}
          region: ${{ env.REGION }}
          build_artifacts: '${{ env.SRC_PATH }}/skaffold.yaml'